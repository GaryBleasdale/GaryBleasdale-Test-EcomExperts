{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  {%- if block.settings.picker_type == 'button' -%}
    <variant-radios
      id="variant-radios-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <fieldset class="js product-form__input">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options', product: product, option: option, block: block %}
        </fieldset>
      {%- endfor -%}
      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-radios>
  {%- else -%}
    <variant-selects
      id="variant-selects-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        {% if option.name == 'Color' %}
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
              {{ option.name }}
          </label>
         {% comment %} Hidden color selectors{% endcomment %}
          <div class="product-form__input product-form__input--dropdown" style="display:none">
            <div class="select">
              <select
                id="Option-{{ section.id }}-{{ forloop.index0 }}"
                class="select__select"
                name="options[{{ option.name | escape }}]"
                form="{{ product_form_id }}"
              >
                {% render 'product-variant-options', product: product, option: option, block: block %}
              </select>
              {% render 'icon-caret' %}
            </div>
          </div>
          {% comment %} End hidden color selectors{% endcomment %}
          {% comment %} Swatch selectors{% endcomment %}
          {% assign SwatchData = '' %}
          {% for variant in product.variants %}
            {% assign CurrentVariantImage = variant.image.src | image_url: width: 600 %}
            {% assign CurrentVariantOption1 = variant.option1 %}
            {% unless SwatchData contains CurrentVariantImage %}
              {% assign SwatchData = SwatchData | append: CurrentVariantImage | append: ',' | append: CurrentVariantOption1 | append: ";" %}
            {% endunless %} 
          {% endfor %}  
          {% assign SwatchesArray = SwatchData | split: ";" %}

          <div class="swatch-container" style="display:flex">
            {% for Swatch in SwatchesArray %}
              {% assign SplitSwatch = Swatch | split: "," %}
              {% assign SwatchColor = ''  %}
              {% assign SwatchImageSrc = ''  %}
              {% for Swatch in SplitSwatch %}
                {% if forloop.index == 1 %}
                  {% assign SwatchImageSrc = Swatch %}
                {% else %}
                  {% assign SwatchColor = Swatch %}
                {% endif %}
              {% endfor %}  
                <div class="swatch" data-swatch-color="{{ SwatchColor | handleize }}" style="padding:10px;border-radius:50px;display:flex">
                   <img src="{{SwatchImageSrc}}" alt="{{ SwatchColor }}" class="swatch__image" style="width:50px;height:50px">
                </div> 
            {% endfor %}  
          </div>
        {% elsif option.name == 'Size' %}
          <div class="product-form__input product-form__input--dropdown">
            <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
              {{ option.name }}
            </label>
            <div class="select">
              <select
                id="Option-{{ section.id }}-{{ forloop.index0 }}"
                class="select__select"
                name="options[{{ option.name | escape }}]"
                form="{{ product_form_id }}"
              >
                <option
                  value="Unselected"
                >
                Unselected
                </option>
                {% render 'product-variant-options', product: product, option: option, block: block %}
              </select>
              {% render 'icon-caret' %}
            </div>
          </div>
        {% else %}
          <div class="product-form__input product-form__input--dropdown">
            <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
              {{ option.name }}
            </label>
            <div class="select">
              <select
                id="Option-{{ section.id }}-{{ forloop.index0 }}"
                class="select__select"
                name="options[{{ option.name | escape }}]"
                form="{{ product_form_id }}"
              >
                {% render 'product-variant-options', product: product, option: option, block: block %}
              </select>
              {% render 'icon-caret' %}
            </div>
          </div>
        {% endif %}
      {%- endfor -%}

      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-selects>
  {%- endif -%}
{%- endunless -%}

<noscript class="product-form__noscript-wrapper-{{ section.id }}">
  <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
    <label class="form__label" for="Variants-{{ section.id }}">
      {{- 'products.product.product_variants' | t -}}
    </label>
    <div class="select">
      <select
        name="id"
        id="Variants-{{ section.id }}"
        class="select__select"
        form="{{ product_form_id }}"
      >
        {%- for variant in product.variants -%}
          <option
            {% if variant == product.selected_or_first_available_variant %}
              selected="selected"
            {% endif %}
            {% if variant.available == false %}
              disabled
            {% endif %}
            value="{{ variant.id }}"
          >
            {%- liquid
              echo variant.title
              echo variant.price | money | strip_html | prepend: ' - '
              if variant.available == false
                echo 'products.product.sold_out' | t | prepend: ' - '
              endif
              if variant.quantity_rule.increment > 1
                echo 'products.product.quantity.multiples_of' | t: quantity: variant.quantity_rule.increment | prepend: ' - '
              endif
              if variant.quantity_rule.min > 1
                echo 'products.product.quantity.minimum_of' | t: quantity: variant.quantity_rule.min | prepend: ' - '
              endif
              if variant.quantity_rule.max != null
                echo 'products.product.quantity.maximum_of' | t: quantity: variant.quantity_rule.max | prepend: ' - '
              endif
              # TODO: enable theme-check once `item_count_for_variant` is accepted as valid filter
              # theme-check-disable
              assign cart_quantity = cart | item_count_for_variant: variant.id
              # theme-check-enable
              if cart_quantity > 0
                echo 'products.product.quantity.in_cart_html' | t: quantity: cart_quantity | prepend: ' - '
              endif
            -%}
          </option>
        {%- endfor -%}
      </select>
      {% render 'icon-caret' %}
    </div>
  </div>
</noscript>
<script>
       
  document.addEventListener('DOMContentLoaded', function () {
    // Code to control swatch behaviour and appearance 
    const colorSelect = document.querySelector('#Option-{{ section.id }}-0');
    const variantSelects = document.querySelector('variant-selects');
    const swatches = document.querySelectorAll('.swatch');
    const mainImageContainer = document.querySelector('.product__media');
    let selectedColor = '{{ product.selected_variant.option1 }}';

    function updateMainImage(swatch) {
      let mainImg = mainImageContainer.querySelector('img');
      mainImg.src = swatch.querySelector('img').src;
      mainImg.srcset = '';
    }

    function isUnselectedSize() {
      let sizesDropdown = document.querySelectorAll('#Option-{{ section.id }}-1>option');
      return Array.from(sizesDropdown).some(option => option.value === 'Unselected' && option.selected);
    }

    function updateSwatchAndSelect(swatchColor) {
      updateSwatchStyle(swatchColor);
      updateSelectedOption(swatchColor);
      if (!isUnselectedSize()) {
        dispatchVariantChange();
      }
    }

    function updateSwatchStyle(selectedColor) {
      let swatchIsSelected = false;
      swatches.forEach(swatch => {
        if (swatch.dataset.swatchColor.toLowerCase() === selectedColor.toLowerCase()) {
          swatch.style.background = 'black';
          swatchIsSelected = true;
        } else {
          swatch.style.background = 'none';
        }
      });

      if (!swatchIsSelected && swatches.length > 0) {
        swatches[0].style.background = 'black';
      }
    }

    function updateSelectedOption(selectedColor) {
      colorSelect.querySelectorAll('option').forEach(option => {
        option.selected = option.value.toLowerCase() === selectedColor.toLowerCase();
      });
    }

    function dispatchVariantChange() {
      const changeEvent = new Event('change', { bubbles: true });
      variantSelects.dispatchEvent(changeEvent);
    }

    swatches.forEach(swatch => {
      swatch.addEventListener('click', function () {
        const swatchColor = this.dataset.swatchColor.toLowerCase();
        updateMainImage(this);
        updateSwatchAndSelect(swatchColor);
      });
    });


    updateSwatchAndSelect(selectedColor);

    // Ensure that when the user navigates back to the page after having selected a variant, and there is a size already selected, that the add to cart button is enabled
    window.addEventListener('pageshow', function (event) {
      if (event.persisted || (window.performance && window.performance.navigation.type == 2)) {
        if (!isUnselectedSize()) {
          dispatchVariantChange();
        }
      }
    });
  });

</script>
